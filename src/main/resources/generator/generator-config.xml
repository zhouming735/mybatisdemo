<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
    <!-- 引入配置文件 -->
    <properties resource="properties/jdbc.properties"/>

    <!-- 指定数据连接驱动jar地址
    <classPathEntry location="${classPath}"/>-->

    <!-- 一个数据库一个context -->
    <context id="sampledb" targetRuntime="MyBatis3">
        <!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 -->
        <property name="javaFileEncoding" value="UTF-8"></property>

        <!-- 配置内置的或者自定义的Plugin,有缺陷：不同主键类型 不能通用
        <plugin type="com.lomen.mybatisdemo.plugin.BaseMapperGeneratorPlugin" />-->

        <!-- 生成的pojo，将implements Serializable-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>

        <!-- 自定义注释类全路径 -->
        <commentGenerator type="com.lomen.mybatisdemo.plugin.MyCommentGenerator">
        </commentGenerator>
        <!-- 默认注释
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>&lt;!&ndash; 是否取消注释 &ndash;&gt;
            <property name="suppressDate" value="true"/> &lt;!&ndash; 是否生成注释代时间戳&ndash;&gt;
        </commentGenerator>-->

        <!-- jdbc连接 -->
        <jdbcConnection driverClass="${jdbc.driverClassName}"
                        connectionURL="${jdbc.url}" userId="${jdbc.username}"
                        password="${jdbc.password}"/>

        <!-- 类型转换 -->
        <javaTypeResolver>
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="com.lomen.mybatisdemo.user.model"
                            targetProject="./src/main/java">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否针对string类型的字段在set的时候进行trim调用 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- 生成mapxml文件 -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="./src/main/resources">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 对应的Mapper接口类文件-->
        <javaClientGenerator targetPackage="com.lomen.mybatisdemo.user.dao"
                             targetProject="./src/main/java" type="XMLMAPPER">
            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 配置表信息 -->
        <table schema="${jdbc.username}" tableName="t_user"
               domainObjectName="UserEntity" enableCountByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               enableUpdateByExample="false">
            <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample
                是否生成 example类   -->

            <!-- 忽略列，不生成bean 字段 -->
            <ignoreColumn column="credits"/>
            <!-- 指定列的java数据类型
            <columnOverride column="列名" jdbcType="VARCHAR"/>-->
        </table>

        <table tableName="t_test" domainObjectName="TestEntity"  enableCountByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               enableUpdateByExample="false"></table>

    </context>
</generatorConfiguration>